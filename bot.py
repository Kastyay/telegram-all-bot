import os
import asyncio
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = '8443886410:AAECQfMTX4wVf0Ax1zkbVoqDbcUtMVTZIQU'

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤. "
        "–î–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É –∏ –¥–∞–π—Ç–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, "
        "–∑–∞—Ç–µ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /all"
    )

async def all_members(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –≥—Ä—É–ø–ø–µ
        if update.effective_chat.type not in ['group', 'supergroup']:
            await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö!")
            return
        
        await update.message.reply_text("‚è≥ –°–æ–±–∏—Ä–∞—é —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...")
        
        # –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        unique_users = {}
        
        # –ú–µ—Ç–æ–¥ 1: –ü–æ–ª—É—á–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        try:
            admins = await context.bot.get_chat_administrators(chat_id)
            for admin in admins:
                user = admin.user
                if not user.is_bot and user.id not in unique_users:
                    unique_users[user.id] = user
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {e}")
        
        # –ú–µ—Ç–æ–¥ 2: –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        try:
            async for message in context.bot.get_chat_history(chat_id, limit=200):
                if message.from_user and not message.from_user.is_bot:
                    user = message.from_user
                    if user.id not in unique_users:
                        unique_users[user.id] = user
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π
        mentions = []
        for user in unique_users.values():
            if user.username:
                mentions.append(f"@{user.username}")
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç username, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è + ID –¥–ª—è —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
                mentions.append(f"[{user.first_name or 'User'}](tg://user?id={user.id})")
        
        if mentions:
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –≥—Ä—É–ø–ø—ã –ø–æ 20 —É–ø–æ–º–∏–Ω–∞–Ω–∏–π, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            chunk_size = 20
            mention_chunks = [mentions[i:i + chunk_size] for i in range(0, len(mentions), chunk_size)]
            
            for i, chunk in enumerate(mention_chunks):
                message = f"üì¢ –£—á–∞—Å—Ç–Ω–∏–∫–∏ ({len(mentions)} –≤—Å–µ–≥–æ):\n" + " ".join(chunk) if i == 0 else " ".join(chunk)
                await update.message.reply_text(message, parse_mode='Markdown')
        else:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —É–ø–æ–º–∏–Ω–∞–Ω–∏—è")
            
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
        if "Forbidden" in str(e):
            error_msg += "\n\n–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã —Å –ø—Ä–∞–≤–∞–º–∏:\n‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n‚Ä¢ –ß—Ç–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"
        await update.message.reply_text(error_msg)

async def main():
    # –°–æ–∑–¥–∞–µ–º Application
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("all", all_members))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    await application.run_polling()

if __name__ == '__main__':
    asyncio.run(main())
